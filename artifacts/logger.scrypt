
contract Logger {
  @state bytes namespace;
  @state PubKey operator;
  @state PubKey owner;
  public function log(bytes level, bytes kind, bytes message, Sig signature, SigHashPreimage __scrypt_ts_txPreimage, int __scrypt_ts_changeAmount, Ripemd160 __scrypt_ts_changeAddress) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'41')));
    
    require(checkSig(signature, this.operator));
    int amount = SigHash.value(__scrypt_ts_txPreimage);
    bytes outputs = this.buildStateOutput(amount);
    if(__scrypt_ts_changeAmount > 0) {
        outputs += (__scrypt_ts_changeAmount > 0 ? Utils.buildOutput(Utils.buildPublicKeyHashScript(__scrypt_ts_changeAddress), __scrypt_ts_changeAmount) : b'');
      }
    require(SigHash.hashOutputs(__scrypt_ts_txPreimage) == hash256(outputs));
  }
  public function destroy(Sig signature, SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'41')));
    require(checkSig(signature, this.owner));
  }
    function buildStateOutput(int amount): bytes {
      bytes script = this.getStateScript();
      return Utils.buildOutput(script, amount);
    }
}